#
# Copyright (C) 2024-2025 by TheTeamVivek@Github, < https://github.com/TheTeamVivek >.
#
# This file is part of < https://github.com/TheTeamVivek/YukkiMusic > project,
# and is released under the MIT License.
# Please see < https://github.com/TheTeamVivek/YukkiMusic/blob/master/LICENSE >
#
# All rights reserved.
#
from uuid import uuid4

from telethon import events
from telethon.tl.types import (
    DocumentAttributeImageSize,
    InputBotInlineMessageMediaAuto,
    InputBotInlineResult,
    InputWebDocument,
    KeyboardButtonUrl,
    ReplyInlineMarkup,
)
from youtubesearchpython.__future__ import VideosSearch

from YukkiMusic.misc import BANNED_USERS
from YukkiMusic import tbot
from YukkiMusic.utils.inlinequery import answer


@tbot.on(events.InlineQuery(users=list(BANNED_USERS), blacklist_users=True))
async def inline_query_handler(event):
    text = event.query.query.strip().lower()
    answers = []
    if text.strip() == "":
        try:
            await event.answer(results=answer, cache_time=10)
        except Exception:
            return
    else:
        a = VideosSearch(text, limit=20)
        result = (await a.next()).get("result")
        for x in range(15):
            title = (result[x]["title"]).title()
            duration = result[x]["duration"]
            views = result[x]["viewCount"]["short"]
            thumbnail = result[x]["thumbnails"][0]["url"].split("?")[0]
            channellink = result[x]["channel"]["link"]
            channel = result[x]["channel"]["name"]
            link = result[x]["link"]
            published = result[x]["publishedTime"]
            description = f"{views} | {duration} Mins | {channel}  | {published}"
            buttons = ReplyInlineMarkup(
                [
                    [
                        KeyboardButtonUrl(
                            text="üé• ·¥°·¥Ä·¥õ·¥Ñ ú ·¥è…¥  è·¥è·¥ú·¥õ·¥ú ô·¥á",
                            url=link,
                        )
                    ],
                ]
            )
            searched_text = f"""
‚ùáÔ∏è**·¥õ…™·¥õ ü·¥á:** [{title}]({link})

‚è≥**·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥:** {duration} Mins
üëÄ**·¥†…™·¥á·¥°s:** `{views}`
‚è∞**·¥ò·¥ú ô ü…™s ú·¥á·¥Ö ·¥õ…™·¥ç·¥á:** {published}
üé•**·¥Ñ ú·¥Ä…¥…¥·¥á ü …¥·¥Ä·¥ç·¥á:** {channel}
üìé**·¥Ñ ú·¥Ä…¥…¥·¥á ü  ü…™…¥·¥ã:** [·¥†…™s…™·¥õ “ì Ä·¥è·¥ç  ú·¥á Ä·¥á]({channellink})

__ Ä·¥á·¥ò ü è ·¥°…™·¥õ ú /play ·¥è…¥ ·¥õ ú…™s s·¥á·¥Ä Ä·¥Ñ ú·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è s·¥õ Ä·¥á·¥Ä·¥ç …™·¥õ ·¥è…¥ ·¥†·¥è…™·¥Ñ·¥á·¥Ñ ú·¥Ä·¥õ.__

‚ö°Ô∏è ** …™…¥ ü…™…¥·¥á s·¥á·¥Ä Ä·¥Ñ ú  ô è {tbot.mention} **"""
            photo = InputWebDocument(
                url=thumbnail,
                size=0,
                mime_type="image/jpeg",
                attributes=[DocumentAttributeImageSize(w=0, h=0)],
            )
            msg, entities = tbot._parse_message_text(searched_text, ())
            answers.append(
                InputBotInlineResult(
                    id=str(uuid4()),
                    type="photo",
                    title=title,
                    content=photo,
                    thumb=photo,
                    description=description,
                    send_message=InputBotInlineMessageMediaAuto(
                        message=msg, entities=entities, buttons=buttons
                    ),
                )
            )
        try:
            return await event.answer(results=answers)
        except Exception:
            return
